daemon off;
worker_processes auto;
env ALLOW_ROBOTS;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%= worker_connections %>;
}

http {
  gzip on;
  gzip_comp_level 6;
  gzip_min_length 512;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary on;
  gzip_proxied any;

  server_tokens off;

<% if logging['access'] %>
  access_log logs/access.log;
<% else %>
  access_log off;
<% end %>

<% if debug %>
  error_log stderr debug;
  rewrite_log on;
<% else %>
  error_log stderr <%= logging['error'] %>;
<% end %>

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  #Must read the body in 5 seconds.
  client_body_timeout 5;
<% if client_max_body_size %>
  client_max_body_size <%= client_max_body_size %>;
<% end %>

  server {
    listen <%= port %> reuseport;
    charset <%= encoding %>;
    port_in_redirect off;
    keepalive_timeout 5;
    root <%= root %>;
  <% if error_page %>
    error_page 404 500 /<%= error_page %>;
  <% end %>
  <% if proxies.any? || prerender %>
    resolver <%= resolver %>;
  <% end %>

  <% if basic_auth %>
    auth_basic "Restricted";
    auth_basic_user_file <%= basic_auth_htpasswd_path %>;
  <% end %>

    mruby_post_read_handler /app/bin/config/lib/ngx_mruby/headers.rb cache;

  <% if prerender %>
    proxy_set_header X-Prerender-Token <%= prerender['token'] %>;
    set $prerender 0;

    if ($http_user_agent ~* "(?:Googlebot\/)|(?:Googlebot-Mobile)|(?:Googlebot-Image)|(?:Googlebot-News)|(?:Googlebot-Video)|(?:AdsBot-Google([^-]|$))|(?:AdsBot-Google-Mobile)|(?:Feedfetcher-Google)|(?:Mediapartners-Google)|(?:Mediapartners \(Googlebot\))|(?:APIs-Google)|(?:bingbot)|(?:Slurp)|(?:[wW]get)|(?:LinkedInBot)|(?:Python-urllib)|(?:python-requests)|(?:aiohttp)|(?:httpx)|(?:libwww-perl)|(?:httpunit)|(?:nutch)|(?:Go-http-client)|(?:phpcrawl)|(?:msnbot)|(?:jyxobot)|(?:FAST-WebCrawler)|(?:FAST Enterprise Crawler)|(?:BIGLOTRON)|(?:Teoma)|(?:convera)|(?:seekbot)|(?:Gigabot)|(?:Gigablast)|(?:exabot)|(?:ia_archiver)|(?:GingerCrawler)|(?:webmon )|(?:HTTrack)|(?:grub.org)|(?:UsineNouvelleCrawler)|(?:antibot)|(?:netresearchserver)|(?:speedy)|(?:fluffy)|(?:findlink)|(?:msrbot)|(?:panscient)|(?:yacybot)|(?:AISearchBot)|(?:ips-agent)|(?:tagoobot)|(?:MJ12bot)|(?:woriobot)|(?:yanga)|(?:buzzbot)|(?:mlbot)|(?:YandexBot)|(?:YandexImages)|(?:YandexAccessibilityBot)|(?:YandexMobileBot)|(?:YandexMetrika)|(?:YandexTurbo)|(?:YandexImageResizer)|(?:YandexVideo)|(?:YandexAdNet)|(?:YandexBlogs)|(?:YandexCalendar)|(?:YandexDirect)|(?:YandexFavicons)|(?:YaDirectFetcher)|(?:YandexForDomain)|(?:YandexMarket)|(?:YandexMedia)|(?:YandexMobileScreenShotBot)|(?:YandexNews)|(?:YandexOntoDB)|(?:YandexPagechecker)|(?:YandexPartner)|(?:YandexRCA)|(?:YandexSearchShop)|(?:YandexSitelinks)|(?:YandexSpravBot)|(?:YandexTracker)|(?:YandexVertis)|(?:YandexVerticals)|(?:YandexWebmaster)|(?:YandexScreenshotBot)|(?:purebot)|(?:Linguee Bot)|(?:CyberPatrol)|(?:voilabot)|(?:Baiduspider)|(?:citeseerxbot)|(?:spbot)|(?:twengabot)|(?:postrank)|(?:TurnitinBot)|(?:scribdbot)|(?:page2rss)|(?:sitebot)|(?:linkdex)|(?:Adidxbot)|(?:ezooms)|(?:dotbot)|(?:Mail.RU_Bot)|(?:discobot)|(?:heritrix)|(?:findthatfile)|(?:europarchive.org)|(?:NerdByNature.Bot)|(?:sistrix crawler)|(?:Ahrefs(Bot|SiteAudit))|(?:fuelbot)|(?:CrunchBot)|(?:IndeedBot)|(?:mappydata)|(?:woobot)|(?:ZoominfoBot)|(?:PrivacyAwareBot)|(?:Multiviewbot)|(?:SWIMGBot)|(?:Grobbot)|(?:eright)|(?:Apercite)|(?:semanticbot)|(?:Aboundex)|(?:domaincrawler)|(?:wbsearchbot)|(?:summify)|(?:CCBot)|(?:edisterbot)|(?:seznambot)|(?:ec2linkfinder)|(?:gslfbot)|(?:aiHitBot)|(?:intelium_bot)|(?:facebookexternalhit)|(?:Yeti)|(?:RetrevoPageAnalyzer)|(?:lb-spider)|(?:Sogou)|(?:lssbot)|(?:careerbot)|(?:wotbox)|(?:wocbot)|(?:ichiro)|(?:DuckDuckBot)|(?:lssrocketcrawler)|(?:drupact)|(?:webcompanycrawler)|(?:acoonbot)|(?:openindexspider)|(?:gnam gnam spider)|(?:web-archive-net.com.bot)|(?:backlinkcrawler)|(?:coccoc)|(?:integromedb)|(?:content crawler spider)|(?:toplistbot)|(?:it2media-domain-crawler)|(?:ip-web-crawler.com)|(?:siteexplorer.info)|(?:elisabot)|(?:proximic)|(?:changedetection)|(?:arabot)|(?:WeSEE:Search)|(?:niki-bot)|(?:CrystalSemanticsBot)|(?:rogerbot)|(?:360Spider)|(?:psbot)|(?:InterfaxScanBot)|(?:CC Metadata Scaper)|(?:g00g1e.net)|(?:GrapeshotCrawler)|(?:urlappendbot)|(?:brainobot)|(?:fr-crawler)|(?:binlar)|(?:SimpleCrawler)|(?:Twitterbot)|(?:cXensebot)|(?:smtbot)|(?:bnf.fr_bot)|(?:A6-Indexer)|(?:ADmantX)|(?:Facebot)|(?:OrangeBot\/)|(?:memorybot)|(?:AdvBot)|(?:MegaIndex)|(?:SemanticScholarBot)|(?:ltx71)|(?:nerdybot)|(?:xovibot)|(?:BUbiNG)|(?:Qwantify)|(?:archive.org_bot)|(?:Applebot)|(?:TweetmemeBot)|(?:crawler4j)|(?:findxbot)|(?:S[eE][mM]rushBot)|(?:yoozBot)|(?:lipperhey)|(?:Y!J)|(?:Domain Re-Animator Bot)|(?:AddThis)|(?:Screaming Frog SEO Spider)|(?:MetaURI)|(?:Scrapy)|(?:Livelap[bB]ot)|(?:OpenHoseBot)|(?:CapsuleChecker)|(?:collection@infegy.com)|(?:IstellaBot)|(?:DeuSu\/)|(?:betaBot)|(?:Cliqzbot\/)|(?:MojeekBot\/)|(?:netEstate NE Crawler)|(?:SafeSearch microdata crawler)|(?:Gluten Free Crawler\/)|(?:Sonic)|(?:Sysomos)|(?:Trove)|(?:deadlinkchecker)|(?:Slack-ImgProxy)|(?:Embedly)|(?:RankActiveLinkBot)|(?:iskanie)|(?:SafeDNSBot)|(?:SkypeUriPreview)|(?:Veoozbot)|(?:Slackbot)|(?:redditbot)|(?:datagnionbot)|(?:Google-Adwords-Instant)|(?:adbeat_bot)|(?:WhatsApp)|(?:contxbot)|(?:pinterest.com.bot)|(?:electricmonk)|(?:GarlikCrawler)|(?:BingPreview\/)|(?:vebidoobot)|(?:FemtosearchBot)|(?:Yahoo Link Preview)|(?:MetaJobBot)|(?:DomainStatsBot)|(?:mindUpBot)|(?:Daum\/)|(?:Jugendschutzprogramm-Crawler)|(?:Xenu Link Sleuth)|(?:Pcore-HTTP)|(?:moatbot)|(?:KosmioBot)|(?:pingdom)|(?:AppInsights)|(?:PhantomJS)|(?:Gowikibot)|(?:PiplBot)|(?:Discordbot)|(?:TelegramBot)|(?:Jetslide)|(?:newsharecounts)|(?:James BOT)|(?:Bark[rR]owler)|(?:TinEye)|(?:SocialRankIOBot)|(?:trendictionbot)|(?:Ocarinabot)|(?:epicbot)|(?:Primalbot)|(?:DuckDuckGo-Favicons-Bot)|(?:GnowitNewsbot)|(?:Leikibot)|(?:LinkArchiver)|(?:YaK\/)|(?:PaperLiBot)|(?:Digg Deeper)|(?:dcrawl)|(?:Snacktory)|(?:AndersPinkBot)|(?:Fyrebot)|(?:EveryoneSocialBot)|(?:Mediatoolkitbot)|(?:Luminator-robots)|(?:ExtLinksBot)|(?:SurveyBot)|(?:NING\/)|(?:okhttp)|(?:Nuzzel)|(?:omgili)|(?:PocketParser)|(?:YisouSpider)|(?:um-LN)|(?:ToutiaoSpider)|(?:MuckRack)|(?:Jamie's Spider)|(?:AHC\/)|(?:NetcraftSurveyAgent)|(?:Laserlikebot)|(?:^Apache-HttpClient)|(?:AppEngine-Google)|(?:Jetty)|(?:Upflow)|(?:Thinklab)|(?:Traackr.com)|(?:Twurly)|(?:Mastodon)|(?:http_get)|(?:DnyzBot)|(?:botify)|(?:007ac9 Crawler)|(?:BehloolBot)|(?:BrandVerity)|(?:check_http)|(?:BDCbot)|(?:ZumBot)|(?:EZID)|(?:ICC-Crawler)|(?:ArchiveBot)|(?:^LCC )|(?:filterdb.iss.net\/crawler)|(?:BLP_bbot)|(?:BomboraBot)|(?:Buck\/)|(?:Companybook-Crawler)|(?:Genieo)|(?:magpie-crawler)|(?:MeltwaterNews)|(?:Moreover)|(?:newspaper\/)|(?:ScoutJet)|(?:(^| )sentry\/)|(?:StorygizeBot)|(?:UptimeRobot)|(?:OutclicksBot)|(?:seoscanners)|(?:Hatena)|(?:Google Web Preview)|(?:MauiBot)|(?:AlphaBot)|(?:SBL-BOT)|(?:IAS crawler)|(?:adscanner)|(?:Netvibes)|(?:acapbot)|(?:Baidu-YunGuanCe)|(?:bitlybot)|(?:blogmuraBot)|(?:Bot.AraTurka.com)|(?:bot-pge.chlooe.com)|(?:BoxcarBot)|(?:BTWebClient)|(?:ContextAd Bot)|(?:Digincore bot)|(?:Disqus)|(?:Feedly)|(?:Fetch\/)|(?:Fever)|(?:Flamingo_SearchEngine)|(?:FlipboardProxy)|(?:g2reader-bot)|(?:G2 Web Services)|(?:imrbot)|(?:K7MLWCBot)|(?:Kemvibot)|(?:Landau-Media-Spider)|(?:linkapediabot)|(?:vkShare)|(?:Siteimprove.com)|(?:BLEXBot\/)|(?:DareBoost)|(?:ZuperlistBot\/)|(?:Miniflux\/)|(?:Feedspot)|(?:Diffbot\/)|(?:SEOkicks)|(?:tracemyfile)|(?:Nimbostratus-Bot)|(?:zgrab)|(?:PR-CY.RU)|(?:AdsTxtCrawler)|(?:Datafeedwatch)|(?:Zabbix)|(?:TangibleeBot)|(?:google-xrawler)|(?:axios)|(?:Amazon CloudFront)|(?:Pulsepoint)|(?:CloudFlare-AlwaysOnline)|(?:Google-Structured-Data-Testing-Tool)|(?:WordupInfoSearch)|(?:WebDataStats)|(?:HttpUrlConnection)|(?:Seekport Crawler)|(?:ZoomBot)|(?:VelenPublicWebCrawler)|(?:MoodleBot)|(?:jpg-newsbot)|(?:outbrain)|(?:W3C_Validator)|(?:Validator\.nu)|(?:W3C-checklink)|(?:W3C-mobileOK)|(?:W3C_I18n-Checker)|(?:FeedValidator)|(?:W3C_CSS_Validator)|(?:W3C_Unicorn)|(?:Google-PhysicalWeb)|(?:Blackboard)|(?:ICBot\/)|(?:BazQux)|(?:Twingly)|(?:Rivva)|(?:Experibot)|(?:awesomecrawler)|(?:Dataprovider.com)|(?:GroupHigh\/)|(?:theoldreader.com)|(?:AnyEvent)|(?:Uptimebot\.org)|(?:Nmap Scripting Engine)|(?:2ip.ru)|(?:Clickagy)|(?:Caliperbot)|(?:MBCrawler)|(?:online-webceo-bot)|(?:B2B Bot)|(?:AddSearchBot)|(?:Google Favicon)|(?:HubSpot)|(?:Chrome-Lighthouse)|(?:HeadlessChrome)|(?:CheckMarkNetwork\/)|(?:www\.uptime\.com)|(?:Streamline3Bot\/)|(?:serpstatbot\/)|(?:MixnodeCache\/)|(?:^curl)|(?:SimpleScraper)|(?:RSSingBot)|(?:Jooblebot)|(?:fedoraplanet)|(?:Friendica)|(?:NextCloud)|(?:Tiny Tiny RSS)|(?:RegionStuttgartBot)|(?:Bytespider)|(?:Datanyze)|(?:Google-Site-Verification)|(?:TrendsmapResolver)|(?:tweetedtimes)|(?:NTENTbot)|(?:Gwene)|(?:SimplePie)|(?:SearchAtlas)|(?:Superfeedr)|(?:feedbot)|(?:UT-Dorkbot)|(?:Amazonbot)|(?:SerendeputyBot)|(?:Eyeotabot)|(?:officestorebot)|(?:Neticle Crawler)|(?:SurdotlyBot)|(?:LinkisBot)|(?:AwarioSmartBot)|(?:AwarioRssBot)|(?:RyteBot)|(?:FreeWebMonitoring SiteChecker)|(?:AspiegelBot)|(?:NAVER Blog Rssbot)|(?:zenback bot)|(?:SentiBot)|(?:Domains Project\/)|(?:Pandalytics)|(?:VKRobot)|(?:bidswitchbot)|(?:tigerbot)|(?:NIXStatsbot)|(?:Atom Feed Robot)|(?:Curebot)|(?:PagePeeker\/)|(?:Vigil\/)|(?:rssbot\/)|(?:startmebot\/)|(?:JobboerseBot)|(?:seewithkids)|(?:NINJA bot)|(?:Cutbot)|(?:BublupBot)|(?:BrandONbot)|(?:RidderBot)|(?:Taboolabot)|(?:Dubbotbot)|(?:FindITAnswersbot)|(?:infoobot)|(?:Refindbot)|(?:BlogTraffic\/\d\.\d+ Feed-Fetcher)|(?:SeobilityBot)|(?:Cincraw)|(?:Dragonbot)|(?:VoluumDSP-content-bot)|(?:FreshRSS)|(?:BitBot)|(?:^PHP-Curl-Class)|(?:Google-Certificates-Bridge)|(?:Viber)|(?:e\.ventures Investment Crawler)|(?:evc-batch)|(?:PetalBot)") {
      set $prerender 1;
    }
    if ($args ~ "_escaped_fragment_") {
      set $prerender 1;
    }
    if ($http_user_agent ~ "Prerender") {
      set $prerender 0;
    }
    if ($uri ~* "\.(js|css|json|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|csv|tsv|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
      set $prerender 0;
    }
  <% end %>

    location = /robots.txt {
      mruby_content_handler_code 'Nginx.echo "User-agent: *\nDisallow: " + (ENV["ALLOW_ROBOTS"] == "true" ? "" : "/")';
    }

    location / {
      mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;
    <% if prerender %>
      if ($prerender = 1) {
        set $prerender <%= prerender['server_name'] %>;
      <% if https_only %>
        rewrite .* /https://$host$request_uri? break;
      <% else %>
        rewrite .* /$scheme://$host$request_uri? break;
      <% end %>
        proxy_pass https://$prerender;
      }
    <% end %>
    <% if clean_urls %>
      try_files $uri.html $uri $uri/ $fallback;
    <% else %>
      try_files $uri $uri/ $fallback;
    <% end %>
    }

  <% if clean_urls %>
    location ~ \.html$ {
      try_files $uri =404;
    }
  <% end %>

  <% if https_only %>
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$request_uri;
    }
  <% end %>

  <% if canonical_host %>
    if ($host != <%= canonical_host %>) {
      return 301 $http_x_forwarded_proto://<%= canonical_host %>$request_uri;
    }
  <% end %>

  <% routes.each do |route, path| %>
    location ~ ^<%= route %>$ {
      set $route <%= route %>;
      mruby_set $path /app/bin/config/lib/ngx_mruby/routes_path.rb cache;
      mruby_set $fallback /app/bin/config/lib/ngx_mruby/routes_fallback.rb cache;
    <% if prerender %>
      if ($prerender = 1) {
        set $prerender <%= prerender['server_name'] %>;
      <% if https_only %>
        rewrite .* /https://$host$request_uri? break;
      <% else %>
        rewrite .* /$scheme://$host$request_uri? break;
      <% end %>
        proxy_pass https://$prerender;
      }
    <% end %>
    <% if clean_urls %>
      try_files $uri.html $uri $uri/ $path $fallback;
    <% else %>
      try_files $uri $path $fallback;
    <% end %>
    }
  <% end %>

  # need this b/c setting $fallback to =404 will try #{root}=404 instead of returning a 404
  location @404 {
    return 404;
  }

  # fallback proxy named match
  <% proxies.each do |location, hash| %>
    set $<%= hash['name'] %> <%= hash['host'] %>;
    location @<%= location %> {
      rewrite ^<%= location %>/?(.*)$ <%= hash['path'] %>/$1 break;
      # can reuse variable set above
      proxy_pass $<%= hash['name'] %>;
      proxy_ssl_server_name on;
      <% %w(http https).each do |scheme| %>
      proxy_redirect <%= hash["redirect_#{scheme}"] %> <%= location %>;
      <% end %>
    }
  <% end %>

  # fallback redirects named match
  <% redirects.each do |path, hash| %>
    location @<%= path %> {
      return <%= hash['status'] || 301 %> <%= hash['url'] %>;
    }
  <% end %>

  }
}
